apiVersion: apps/v1
kind: Deployment
metadata:
  name: aspnetcorewebapp-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: aspnetcorewebapp
  template:
    metadata:
      labels:
        app: aspnetcorewebapp
    spec:
      containers:
        - name: aspnetcorewebapp
          image: aspnetcorewebapp
          imagePullPolicy: IfNotPresent # загрузка образа из локального хранилища https://kubernetes.io/docs/concepts/containers/images/#updating-images
          ports:
            - containerPort: 80
          env: # https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
            - name: ASPNETCORE_ENVIRONMENT
              value: "Development"
            - name: bak_ASPNETCORE_HTTPS_PORT
              value: "443"
            - name: bak_ASPNETCORE_Kestrel__Certificates__Default__Password
              value: "QWE098spv"
            - name: bak_ASPNETCORE_Kestrel__Certificates__Default__Path
              value: "/https/aspnetcorewebapp.pfx"
            - name: bak_ASPNETCORE_URLS
              value: "https://+:443;http://+:80"
            - name: Docker_Db_Development_Password
              value: "0"
---
# для доступа с локального ПК
    # https://matthewpalmer.net/kubernetes-app-developer/articles/kubernetes-ports-targetport-nodeport-service.html
    # https://www.bmc.com/blogs/kubernetes-port-targetport-nodeport/
    # https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
apiVersion: v1
kind: Service
metadata:
  name: aspnetcorewebapp-nodeport # может использоваться в url для доступа внутри сети, например http://aspnetcorewebapp-nodeport
    # https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-hostname-and-subdomain-fields
    # https://devops.stackexchange.com/a/2446
spec:
  type: NodePort
  selector:
    app: aspnetcorewebapp
  ports:
    - name: aspnetcorewebapp
      protocol: TCP
      port: 80 # порт доступа к этому сервису внутри сети
      targetPort: 80 # порт приложения (kind: Deployment)
      nodePort: 32005 # порт для доступа с локального ПК
        # https://kubernetes.io/ru/docs/tutorials/kubernetes-basics/expose/expose-intro/
---
# для доступа внутри сети Kubernetes
apiVersion: v1
kind: Service
metadata:
# может использоваться в url для доступа внутри сети, например http://aspnetcorewebapp-clusterip
  name: aspnetcorewebapp-clusterip 
spec:
  type: ClusterIP
  selector:
    app: aspnetcorewebapp
  ports:
  - name: aspnetcorewebapp
    protocol: TCP
    port: 80 # порт доступа к этому сервису внутри сети Kubernetes
    targetPort: 80 # порт приложения (kind: Deployment)
---
# для доступа с локального ПК только для порта 80
    # https://kubernetes.io/docs/concepts/services-networking/ingress/
    # https://stackoverflow.com/questions/56243121/can-i-set-custom-ports-for-a-kubernetes-ingress-to-listen-on-besides-80-443
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aspnetcorewebapp-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/use-regex: 'true'
spec:  
  rules:
  - 
    # host: localhost
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: aspnetcorewebapp-clusterip
            port:
              number: 80
---
# доступ только через внешний ip
    # https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer
apiVersion: v1
kind: Service
metadata:
  name: aspnetcorewebapp-loadbalancer
spec:
  type: LoadBalancer
  # externalTrafficPolicy: Local # Cluster
  # Cluster: (default) Kubernetes will perform further balancing having the ability to forward the request to another node, adding one more hop in order to balance the load more efficciently
  # Local: preserves the client source IP and avoids a second hop for LoadBalancer and NodePort type Services, but risks potentially imbalanced traffic spreading
  ports:
    - port: 80
      targetPort: 80
      nodePort: 32005
  selector:
    name: aspnetcorewebapp-clusterip